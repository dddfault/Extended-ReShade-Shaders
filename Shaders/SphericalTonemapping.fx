///////////////////////////////////////////////////////////////////////////
// Spherical Tonemapping
///////////////////////////////////////////////////////////////////////////
// Original code by Ubisoft
// Ported to ReShade 2.0 by Marty McFly
// Ported to ReShade 4.0 by Insomnia
// Modified by dddfault
///////////////////////////////////////////////////////////////////////////

// INITIAL SETUP //////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
#include "ReShade.fxh"

// USER INTERFACE /////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
uniform float sphericalAmount <
  ui_label    = "Spherical Tonemapping Power";
  ui_type     = "drag";
  ui_min      = 0.0;
  ui_max      = 5.0;
  ui_step     = 0.01;
  > = 0.7;

// PIXEL SHADER ///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
void PS_SphericalTonemap(float4 vpos : SV_Position, float2 texcoord : TEXCOORD, out float4 color : SV_Target0)
{
  color     = tex2D(ReShade::BackBuffer, texcoord.xy);

  float3 signedColor    = color.rgb * 2.0 - 1.0;
  float3 sphericalColor = sqrt(1.0 - signedColor.rgb * signedColor.rgb);
  sphericalColor        = sphericalColor * 0.5 + 0.5;
  sphericalColor       *= color.rgb;
  color.rgb            += sphericalColor.rgb * sphericalAmount;
  color.rgb            *= 0.95;

  color.a   = 1.0;
}

// TECHNIQUE //////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
technique SphericalTonemapping
{
  pass sphericalTonemap
  {
    VertexShader   = PostProcessVS;
    PixelShader    = PS_SphericalTonemap;
  }
}
